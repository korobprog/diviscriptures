#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–µ–∫–∞–ø–æ–≤ —Å—Ç–∏—Ö–æ–≤
–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ cron –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∫–∞–ø–æ–≤
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))
sys.path.append(str(Path(__file__).parent.parent / "python-parser"))

from backup_verses import VerseBackupManager


async def cleanup_old_backups(backup_manager: VerseBackupManager, days_to_keep: int = 30):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
    try:
        backups = await backup_manager.list_backups()
        cutoff_date = datetime.now() - timedelta(days=days_to_keep)
        
        deleted_count = 0
        for backup in backups:
            backup_date = datetime.fromisoformat(backup['created_at'])
            if backup_date < cutoff_date:
                try:
                    os.remove(backup['path'])
                    deleted_count += 1
                    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±–µ–∫–∞–ø: {backup['filename']}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {backup['filename']}: {e}")
        
        if deleted_count > 0:
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤")
        else:
            print("üìÅ –°—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤: {e}")


async def main():
    """–°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–µ–∫–∞–ø –∏ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ"""
    print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–µ–∫–∞–ø - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    backup_manager = VerseBackupManager()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±–µ–∫–∞–ø
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–µ–∫–∞–ø–∞...")
        backup_path = await backup_manager.create_backup(
            compress=True,
            filename=f"daily_backup_{datetime.now().strftime('%Y%m%d')}.json"
        )
        
        print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤...")
        await cleanup_old_backups(backup_manager, days_to_keep=30)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        backups = await backup_manager.list_backups()
        if backups:
            print(f"\nüìä –í—Å–µ–≥–æ –±–µ–∫–∞–ø–æ–≤: {len(backups)}")
            total_size = sum(
                os.path.getsize(backup['path']) for backup in backups 
                if os.path.exists(backup['path'])
            )
            print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / (1024*1024):.1f} MB")
        
        print("üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–µ–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–µ–∫–∞–ø–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
