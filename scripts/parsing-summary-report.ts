#!/usr/bin/env tsx

/**
 * Comprehensive summary report of parsing results
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function generateParsingSummaryReport() {
  console.log('üìä –ü–ê–†–°–ò–ù–ì –û–¢–ß–ï–¢ - Vrinda Sangha\n');
  console.log('=' .repeat(50));

  try {
    // Get all parse records
    const parseRecords = await prisma.parseRecord.findMany({
      orderBy: { createdAt: 'desc' },
      include: {
        initiator: {
          select: { name: true, email: true }
        }
      }
    });

    // Get all verses
    const allVerses = await prisma.verse.findMany({
      orderBy: [
        { title: 'asc' },
        { chapter: 'asc' },
        { verseNumber: 'asc' }
      ]
    });

    console.log('\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${parseRecords.length}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤: ${parseRecords.filter(r => r.success).length}`);
    console.log(`   –ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤: ${parseRecords.filter(r => !r.success).length}`);
    console.log(`   –í—Å–µ–≥–æ —Å—Ç–∏—Ö–æ–≤ –≤ –ë–î: ${allVerses.length}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${parseRecords.length > 0 ? ((parseRecords.filter(r => r.success).length / parseRecords.length) * 100).toFixed(1) : 0}%`);

    console.log('\nüìö –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –¢–ï–ö–°–¢–ê–ú:');
    
    // Group verses by title
    const versesByTitle = allVerses.reduce((acc, verse) => {
      if (!acc[verse.title]) {
        acc[verse.title] = [];
      }
      acc[verse.title].push(verse);
      return acc;
    }, {} as Record<string, typeof allVerses>);

    if (Object.keys(versesByTitle).length === 0) {
      console.log('   ‚ùå –°—Ç–∏—Ö–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    } else {
      Object.entries(versesByTitle).forEach(([title, verses]) => {
        console.log(`\n   üìñ ${title}:`);
        console.log(`      –í—Å–µ–≥–æ —Å—Ç–∏—Ö–æ–≤: ${verses.length}`);
        
        // Group by chapter
        const chapters = verses.reduce((acc, verse) => {
          if (!acc[verse.chapter]) {
            acc[verse.chapter] = [];
          }
          acc[verse.chapter].push(verse);
          return acc;
        }, {} as Record<number, typeof verses>);

        console.log(`      –ì–ª–∞–≤: ${Object.keys(chapters).length}`);
        
        // Show chapter breakdown
        Object.entries(chapters).forEach(([chapter, chapterVerses]) => {
          console.log(`      –ì–ª–∞–≤–∞ ${chapter}: ${chapterVerses.length} —Å—Ç–∏—Ö–æ–≤`);
        });

        // Show verse range
        const verseNumbers = verses.map(v => v.verseNumber).sort((a, b) => a - b);
        if (verseNumbers.length > 0) {
          console.log(`      –î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∏—Ö–æ–≤: ${verseNumbers[0]} - ${verseNumbers[verseNumbers.length - 1]}`);
        }
      });
    }

    console.log('\nüîç –î–ï–¢–ê–õ–ò –ü–ê–†–°–ò–ù–ì–ê:');
    parseRecords.forEach((record, index) => {
      console.log(`\n   ${index + 1}. ${record.textType.toUpperCase()} (${record.createdAt.toLocaleString()})`);
      console.log(`      –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${record.initiator.name || record.initiator.email}`);
      console.log(`      –°—Ç–∏—Ö–æ–≤ —Å–ø–∞—Ä—Å–µ–Ω–æ: ${record.totalVerses}`);
      console.log(`      –û—à–∏–±–æ–∫: ${record.totalErrors}`);
      console.log(`      –°—Ç–∞—Ç—É—Å: ${record.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –ù–µ—É–¥–∞—á–Ω–æ'}`);
      
      if (record.results) {
        try {
          const results = JSON.parse(record.results);
          if (Array.isArray(results) && results.length > 0) {
            const result = results[0];
            if (result.stats) {
              console.log(`      –î–µ—Ç–∞–ª–∏:`);
              console.log(`         –í—Å–µ–≥–æ —Å—Ç–∏—Ö–æ–≤: ${result.stats.totalVerses || 0}`);
              console.log(`         –£—Å–ø–µ—à–Ω–æ: ${result.stats.successfulVerses || 0}`);
              console.log(`         –û—à–∏–±–æ–∫: ${result.stats.failedVerses || 0}`);
              if (result.stats.duration) {
                console.log(`         –í—Ä–µ–º—è: ${Math.round(result.stats.duration / 1000)} —Å–µ–∫`);
              }
            }
          }
        } catch (e) {
          // Ignore JSON parse errors
        }
      }
    });

    console.log('\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–´ –ò –û–®–ò–ë–ö–ò:');
    const errorRecords = parseRecords.filter(r => !r.success || r.totalErrors > 0);
    
    if (errorRecords.length === 0) {
      console.log('   ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    } else {
      console.log(`   –ù–∞–π–¥–µ–Ω–æ ${errorRecords.length} –∑–∞–ø–∏—Å–µ–π —Å –æ—à–∏–±–∫–∞–º–∏:`);
      
      errorRecords.forEach((record, index) => {
        console.log(`\n   ${index + 1}. ${record.textType.toUpperCase()}:`);
        console.log(`      –û—à–∏–±–æ–∫: ${record.totalErrors}`);
        console.log(`      –î–∞—Ç–∞: ${record.createdAt.toLocaleString()}`);
        
        if (record.results) {
          try {
            const results = JSON.parse(record.results);
            if (Array.isArray(results) && results.length > 0 && results[0].errors) {
              console.log(`      –¢–∏–ø—ã –æ—à–∏–±–æ–∫:`);
              const errors = results[0].errors;
              const errorTypes = errors.reduce((acc: Record<string, number>, error: string) => {
                if (error.includes('fetch') || error.includes('network')) acc['–°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏'] = (acc['–°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏'] || 0) + 1;
                else if (error.includes('timeout')) acc['–¢–∞–π–º–∞—É—Ç—ã'] = (acc['–¢–∞–π–º–∞—É—Ç—ã'] || 0) + 1;
                else if (error.includes('404') || error.includes('not found')) acc['404/–ù–µ –Ω–∞–π–¥–µ–Ω–æ'] = (acc['404/–ù–µ –Ω–∞–π–¥–µ–Ω–æ'] || 0) + 1;
                else if (error.includes('parse') || error.includes('HTML')) acc['–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞'] = (acc['–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞'] || 0) + 1;
                else if (error.includes('rate limit')) acc['–õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤'] = (acc['–õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤'] || 0) + 1;
                else acc['–î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏'] = (acc['–î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏'] || 0) + 1;
                return acc;
              }, {});

              Object.entries(errorTypes).forEach(([type, count]) => {
                console.log(`         ${type}: ${count}`);
              });
            }
          } catch (e) {
            console.log(`      –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏`);
          }
        }
      });
    }

    console.log('\nüìä –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:');
    const sources = allVerses.reduce((acc, verse) => {
      acc[verse.source] = (acc[verse.source] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    if (Object.keys(sources).length === 0) {
      console.log('   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö');
    } else {
      Object.entries(sources).forEach(([source, count]) => {
        console.log(`   ${source}: ${count} —Å—Ç–∏—Ö–æ–≤ (${((count / allVerses.length) * 100).toFixed(1)}%)`);
      });
    }

    console.log('\nüåç –Ø–ó–´–ö–ò:');
    const languages = allVerses.reduce((acc, verse) => {
      acc[verse.language] = (acc[verse.language] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    if (Object.keys(languages).length === 0) {
      console.log('   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —è–∑—ã–∫–∞—Ö');
    } else {
      Object.entries(languages).forEach(([language, count]) => {
        console.log(`   ${language}: ${count} —Å—Ç–∏—Ö–æ–≤ (${((count / allVerses.length) * 100).toFixed(1)}%)`);
      });
    }

    console.log('\nüìù –ö–ê–ß–ï–°–¢–í–û –ö–û–ù–¢–ï–ù–¢–ê:');
    const versesWithSanskrit = allVerses.filter(v => v.sanskrit && v.sanskrit.trim().length > 0);
    const versesWithTranslation = allVerses.filter(v => v.translation && v.translation.trim().length > 0);
    const versesWithTransliteration = allVerses.filter(v => v.transliteration && v.transliteration.trim().length > 0);
    const versesWithCommentary = allVerses.filter(v => v.commentary && v.commentary.trim().length > 0);

    console.log(`   –°—Ç–∏—Ö–∏ —Å —Å–∞–Ω—Å–∫—Ä–∏—Ç–æ–º: ${versesWithSanskrit.length} (${allVerses.length > 0 ? ((versesWithSanskrit.length / allVerses.length) * 100).toFixed(1) : 0}%)`);
    console.log(`   –°—Ç–∏—Ö–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º: ${versesWithTranslation.length} (${allVerses.length > 0 ? ((versesWithTranslation.length / allVerses.length) * 100).toFixed(1) : 0}%)`);
    console.log(`   –°—Ç–∏—Ö–∏ —Å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–µ–π: ${versesWithTransliteration.length} (${allVerses.length > 0 ? ((versesWithTransliteration.length / allVerses.length) * 100).toFixed(1) : 0}%)`);
    console.log(`   –°—Ç–∏—Ö–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: ${versesWithCommentary.length} (${allVerses.length > 0 ? ((versesWithCommentary.length / allVerses.length) * 100).toFixed(1) : 0}%)`);

    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    
    if (parseRecords.length === 0) {
      console.log('   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    } else if (parseRecords.filter(r => r.success).length === 0) {
      console.log('   ‚Ä¢ –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ—É–¥–∞—á–Ω—ã - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞');
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ vedabase.io');
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –∏ –ø—Ä–æ–∫—Å–∏');
    } else if (allVerses.length === 0) {
      console.log('   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞–ª—Å—è, –Ω–æ —Å—Ç–∏—Ö–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î');
      console.log('   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞—Ä—Å–µ—Ä–µ');
    } else {
      console.log('   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ');
      console.log('   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤');
    }

    if (errorRecords.length > 0) {
      console.log('   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º');
      console.log('   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏');
      console.log('   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫');
    }

    console.log('\n' + '=' .repeat(50));
    console.log('üìÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ' + new Date().toLocaleString());

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the report generation
generateParsingSummaryReport();
