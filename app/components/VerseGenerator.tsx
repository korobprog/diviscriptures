'use client'

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Checkbox } from '@/components/ui/checkbox';
import { 
  BookOpen, 
  Loader2, 
  Sparkles,
  Globe,
  CheckCircle,
  AlertCircle
} from 'lucide-react';
import { getVerseTitle, getSectionLabel, type LanguageCode } from '@/lib/localization';
import { processCommentaryText } from '@/lib/commentary-utils';

interface SacredText {
  id: string;
  title: string;
  chapter: number;
  verse: number;
  sanskrit: string;
  transliteration: string;
  wordByWordTranslation?: string;
  translation: string;
  commentary?: string;
  source: string;
  cached: boolean;
  language: string;
  bookName: string;
  isRead?: boolean;
  readAt?: string;
  createdAt?: string;
  updatedAt?: string;
}

interface VerseGeneratorProps {
  sessionId?: string;
  onVerseGenerated?: (verse: SacredText) => void;
  compact?: boolean;
}

const SACRED_TEXTS = [
  { value: '–ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç–∞', label: '–ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç–∞', chapters: 18 },
  { value: '–®—Ä–∏–º–∞–¥-–ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º', label: '–®—Ä–∏–º–∞–¥-–ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º', chapters: 12 },
  { value: '–ß–∞–π—Ç–∞–Ω—å—è-–ß–∞—Ä–∏—Ç–∞–º—Ä–∏—Ç–∞', label: '–ß–∞–π—Ç–∞–Ω—å—è-–ß–∞—Ä–∏—Ç–∞–º—Ä–∏—Ç–∞', chapters: 17 },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∏—Ö–æ–≤ –≤ –≥–ª–∞–≤–µ
function getMaxVersesInChapter(textName: string, chapterNumber: number): number {
  if (textName === '–ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç–∞') {
    const versesPerChapter: Record<number, number> = {
      1: 46, 2: 72, 3: 43, 4: 42, 5: 29, 6: 47,
      7: 30, 8: 28, 9: 34, 10: 42, 11: 55, 12: 20,
      13: 35, 14: 27, 15: 20, 16: 24, 17: 28, 18: 78,
    };
    return versesPerChapter[chapterNumber] || 50;
  }
  
  if (textName === '–®—Ä–∏–º–∞–¥-–ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º') {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –®—Ä–∏–º–∞–¥-–ë—Ö–∞–≥–∞–≤–∞—Ç–∞–º
    return 50; // –ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∑–∂–µ
  }
  
  if (textName === '–ß–∞–π—Ç–∞–Ω—å—è-–ß–∞—Ä–∏—Ç–∞–º—Ä–∏—Ç–∞') {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ß–∞–π—Ç–∞–Ω—å—è-–ß–∞—Ä–∏—Ç–∞–º—Ä–∏—Ç–∞
    return 50; // –ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∑–∂–µ
  }
  
  return 50; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

const LANGUAGES = [
  { value: 'ru', label: '–†—É—Å—Å–∫–∏–π' },
  { value: 'en', label: 'English' },
  { value: 'hi', label: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä' },
  { value: 'es', label: 'Espa√±ol' },
  { value: 'fr', label: 'Fran√ßais' },
  { value: 'de', label: 'Deutsch' },
];

export default function VerseGenerator({ sessionId, onVerseGenerated, compact = false }: VerseGeneratorProps) {
  const [selectedText, setSelectedText] = useState('–ë—Ö–∞–≥–∞–≤–∞–¥-–≥–∏—Ç–∞');
  const [chapter, setChapter] = useState(1);
  const [verse, setVerse] = useState(1);
  const [language, setLanguage] = useState('ru');
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedVerse, setGeneratedVerse] = useState<SacredText | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [autoGenerateTimeout, setAutoGenerateTimeout] = useState<NodeJS.Timeout | null>(null);
  const [isGeneratingRef, setIsGeneratingRef] = useState(false);
  const [showClouds, setShowClouds] = useState(false);

  const selectedTextInfo = SACRED_TEXTS.find(text => text.value === selectedText);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞—á–∫–æ–≤ –≥–ª–∞–≤
  const renderChapterClouds = () => {
    const chapters = Array.from({ length: selectedTextInfo?.chapters || 18 }, (_, i) => i + 1);
    return (
      <div className="flex flex-wrap gap-2 justify-center">
        {chapters.map((chapterNum) => (
          <button
            key={chapterNum}
            onClick={() => {
              setChapter(chapterNum);
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏—Ö –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–ª–∞–≤—ã
              setTimeout(() => {
                generateVerseWithParams(chapterNum, verse);
              }, 100);
            }}
            className={`px-3 py-2 rounded-full text-sm font-medium transition-all duration-200 ${
              chapter === chapterNum
                ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-lg transform scale-105'
                : 'bg-white/80 text-gray-700 hover:bg-purple-100 hover:text-purple-700 shadow-md hover:shadow-lg'
            }`}
            style={{
              clipPath: 'polygon(20% 0%, 80% 0%, 100% 20%, 100% 80%, 80% 100%, 20% 100%, 0% 80%, 0% 20%)'
            }}
          >
            {chapterNum}
          </button>
        ))}
      </div>
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞—á–∫–æ–≤ —Å—Ç–∏—Ö–æ–≤
  const renderVerseClouds = () => {
    const maxVerses = getMaxVersesInChapter(selectedText, chapter);
    const verses = Array.from({ length: maxVerses }, (_, i) => i + 1);
    return (
      <div className="flex flex-wrap gap-2 justify-center max-h-40 overflow-y-auto">
        {verses.map((verseNum) => (
          <button
            key={verseNum}
            onClick={() => {
              setVerse(verseNum);
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏—Ö –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏—Ö–∞
              setTimeout(() => {
                generateVerseWithParams(chapter, verseNum);
              }, 100);
            }}
            className={`px-2 py-1 rounded-full text-xs font-medium transition-all duration-200 ${
              verse === verseNum
                ? 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg transform scale-105'
                : 'bg-white/80 text-gray-600 hover:bg-blue-100 hover:text-blue-700 shadow-md hover:shadow-lg'
            }`}
            style={{
              clipPath: 'polygon(25% 0%, 75% 0%, 100% 25%, 100% 75%, 75% 100%, 25% 100%, 0% 75%, 0% 25%)'
            }}
          >
            {verseNum}
          </button>
        ))}
      </div>
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  const scheduleAutoGenerate = () => {
    if (autoGenerateTimeout) {
      clearTimeout(autoGenerateTimeout);
    }
    
    const timeout = setTimeout(() => {
      if (!isGeneratingRef) {
        handleGenerate();
      }
    }, 1500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 1.5 —Å–µ–∫—É–Ω–¥—ã
    
    setAutoGenerateTimeout(timeout);
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∏—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
  useEffect(() => {
    if (compact) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const timer = setTimeout(() => {
        handleGenerate();
      }, 200);
      return () => clearTimeout(timer);
    }
  }, [compact]);

  // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      if (autoGenerateTimeout) {
        clearTimeout(autoGenerateTimeout);
      }
    };
  }, [autoGenerateTimeout]);

  const generateVerseWithParams = async (chapterNum: number, verseNum: number) => {
    if (!selectedText || !chapterNum || !verseNum) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    if (isGenerating || isGeneratingRef) {
      console.log('Already generating, skipping request');
      return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    }
    
    console.log('Generating verse with params:', { selectedText, chapter: chapterNum, verse: verseNum, language, isGenerating, isGeneratingRef });

    setIsGenerating(true);
    setIsGeneratingRef(true);
    setError(null);
    setGeneratedVerse(null);

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const dbResponse = await fetch('/api/verses/get/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: selectedText,
          chapter: parseInt(chapterNum.toString()),
          verseNumber: parseInt(verseNum.toString()),
          language: language,
        }),
      });

      const dbData = await dbResponse.json();

      if (dbResponse.ok && dbData.success && dbData.verse) {
        // –°—Ç–∏—Ö –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        setGeneratedVerse(dbData.verse);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback
        if (dbData.fallback) {
          console.log('üì¢ Fallback verse used:', dbData.message);
          setError(`‚ÑπÔ∏è ${dbData.message}`);
          // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
          setTimeout(() => setError(null), 5000);
        } else {
          setError(null); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Å—Ç–∏—Ö–æ–º
        console.log('Syncing state with loaded verse:', { 
          loadedChapter: dbData.verse.chapter, 
          loadedVerse: dbData.verse.verse,
          currentChapter: chapter,
          currentVerse: verse,
          isFallback: dbData.fallback
        });
        setChapter(dbData.verse.chapter);
        setVerse(dbData.verse.verse);
        onVerseGenerated?.(dbData.verse);
        return;
      }

      // –ï—Å–ª–∏ —Å—Ç–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –∫–∞–∫ fallback
      console.log('–°—Ç–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–ò –≥–µ–Ω–µ—Ä–∞—Ü–∏—é');
      
      const aiResponse = await fetch('/api/verses/generate/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: selectedText,
          chapter: parseInt(chapterNum.toString()),
          verse: parseInt(verseNum.toString()),
          language: language,
          sessionId: sessionId,
        }),
      });

      const aiData = await aiResponse.json();

      if (!aiResponse.ok) {
        throw new Error(aiData.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–∞');
      }

      if (aiData.success && aiData.verse) {
        setGeneratedVerse(aiData.verse);
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Å—Ç–∏—Ö–æ–º
        console.log('Syncing state with AI generated verse:', { 
          loadedChapter: aiData.verse.chapter, 
          loadedVerse: aiData.verse.verse,
          currentChapter: chapter,
          currentVerse: verse
        });
        setChapter(aiData.verse.chapter);
        setVerse(aiData.verse.verse);
        onVerseGenerated?.(aiData.verse);
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏—Ö');
      }
    } catch (err) {
      console.error('Error getting/generating verse:', err);
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏—Ö–∞');
    } finally {
      setIsGenerating(false);
      setIsGeneratingRef(false);
    }
  };

  const handleGenerate = async () => {
    await generateVerseWithParams(chapter, verse);
  };

  const handleNextVerse = async () => {
    if (selectedTextInfo && !isGenerating && !isGeneratingRef) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å—Ç–∏—Ö –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const currentChapter = generatedVerse?.chapter || chapter;
      const currentVerse = generatedVerse?.verse || verse;
      
      console.log('Searching for next verse:', { currentChapter, currentVerse });
      
      try {
        // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–∏—Ö —á–µ—Ä–µ–∑ API
        const response = await fetch('/api/verses/find-next/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            title: selectedText,
            chapter: currentChapter,
            verseNumber: currentVerse,
            language: language,
          }),
        });

        const data = await response.json();

        if (response.ok && data.success && data.verse) {
          // –°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∏—Ö –Ω–∞–π–¥–µ–Ω
          console.log('Next verse found:', data.verse);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å—Ç–∏—Ö–æ–º
          setChapter(data.verse.chapter);
          setVerse(data.verse.verse);
          setGeneratedVerse(data.verse);
          onVerseGenerated?.(data.verse);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback
          if (data.fallback && data.message) {
            console.log('üì¢ Next verse fallback info:', data.message);
            setError(`‚ÑπÔ∏è ${data.message}`);
            // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => setError(null), 3000);
          } else {
            setError(null); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
          }
        } else {
          // –°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω - –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
          console.log('No next verse found - reached end of text');
          setError('‚ÑπÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞');
          setTimeout(() => setError(null), 3000);
        }
      } catch (error) {
        console.error('Error finding next verse:', error);
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç–∏—Ö–∞');
        setTimeout(() => setError(null), 3000);
      }
    }
  };

  const handlePreviousVerse = async () => {
    if (!isGenerating && !isGeneratingRef) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å—Ç–∏—Ö –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const currentChapter = generatedVerse?.chapter || chapter;
      const currentVerse = generatedVerse?.verse || verse;
      
      console.log('Searching for previous verse:', { currentChapter, currentVerse });
      
      try {
        // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–∏—Ö —á–µ—Ä–µ–∑ API
        const response = await fetch('/api/verses/find-previous/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            title: selectedText,
            chapter: currentChapter,
            verseNumber: currentVerse,
            language: language,
          }),
        });

        const data = await response.json();

        if (response.ok && data.success && data.verse) {
          // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∏—Ö –Ω–∞–π–¥–µ–Ω
          console.log('Previous verse found:', data.verse);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å—Ç–∏—Ö–æ–º
          setChapter(data.verse.chapter);
          setVerse(data.verse.verse);
          setGeneratedVerse(data.verse);
          onVerseGenerated?.(data.verse);
          
          // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∏—Ö –Ω–∞–π–¥–µ–Ω
          setError(null);
        } else {
          // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω - –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–∞
          console.log('No previous verse found - reached beginning of text');
          setError('‚ÑπÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞');
          setTimeout(() => setError(null), 3000);
        }
      } catch (error) {
        console.error('Error finding previous verse:', error);
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å—Ç–∏—Ö–∞');
        setTimeout(() => setError(null), 3000);
      }
    }
  };

  return (
    <Card className="shadow-lotus bg-gradient-lotus border-lotus-pink/20">
      {!compact && (
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Sparkles className="w-5 h-5 text-purple-500" />
            –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–≤—è—â–µ–Ω–Ω—ã—Ö —Å—Ç–∏—Ö–æ–≤
          </CardTitle>
        </CardHeader>
      )}
      <CardContent className={compact ? "p-4 sm:p-6" : "space-y-4 sm:space-y-6 p-4 sm:p-6"}>
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6">
          <div className="space-y-2 sm:space-y-3">
            <label className="block text-sm font-medium text-gray-700">–°–≤—è—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</label>
            <Select value={selectedText} onValueChange={setSelectedText}>
              <SelectTrigger className="h-10 sm:h-11">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {SACRED_TEXTS.map((text) => (
                  <SelectItem key={text.value} value={text.value}>
                    {text.label} ({text.chapters} –≥–ª–∞–≤)
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2 sm:space-y-3">
            <label className="block text-sm font-medium text-gray-700">–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞</label>
            <Select value={language} onValueChange={setLanguage}>
              <SelectTrigger className="h-10 sm:h-11">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {LANGUAGES.map((lang) => (
                  <SelectItem key={lang.value} value={lang.value}>
                    <div className="flex items-center gap-2">
                      <Globe className="w-4 h-4" />
                      {lang.label}
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* –ß–µ–∫–±–æ–∫—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ */}
        <div className="flex items-center space-x-2 mt-4 sm:mt-6">
          <Checkbox 
            id="show-clouds" 
            checked={showClouds}
            onCheckedChange={setShowClouds}
          />
          <label 
            htmlFor="show-clouds" 
            className="text-sm font-medium text-gray-700 cursor-pointer"
          >
            –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤—ã –∏ —Å—Ç–∏—Ö–∏ –æ–±–ª–∞—á–∫–∞–º–∏
          </label>
        </div>

        {/* –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è –∏–ª–∏ –æ–±–ª–∞—á–∫–∏ */}
        {showClouds ? (
          <div className="space-y-6 mt-4 sm:mt-6">
            {/* –û–±–ª–∞—á–∫–∏ –≥–ª–∞–≤ */}
            <div className="space-y-3">
              <label className="block text-sm font-medium text-gray-700 text-center">
                –í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É
              </label>
              {renderChapterClouds()}
            </div>

            {/* –û–±–ª–∞—á–∫–∏ —Å—Ç–∏—Ö–æ–≤ */}
            <div className="space-y-3">
              <label className="block text-sm font-medium text-gray-700 text-center">
                –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏—Ö
              </label>
              {renderVerseClouds()}
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-2 gap-6 sm:gap-8 mt-4 sm:mt-6">
            <div className="space-y-2 sm:space-y-3">
              <label className="block text-sm font-medium text-gray-700">–ì–ª–∞–≤–∞</label>
              <Input
                type="number"
                min="1"
                max={selectedTextInfo?.chapters || 18}
                value={chapter}
                className="h-10 sm:h-11 text-center"
                onChange={(e) => {
                  setChapter(parseInt(e.target.value) || 1);
                  // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                  // scheduleAutoGenerate();
                }}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    handleGenerate();
                  }
                }}
              />
            </div>

            <div className="space-y-2 sm:space-y-3">
              <label className="block text-sm font-medium text-gray-700">–°—Ç–∏—Ö</label>
              <Input
                type="number"
                min="1"
                max={getMaxVersesInChapter(selectedText, chapter)}
                value={verse}
                className="h-10 sm:h-11 text-center"
                onChange={(e) => {
                  setVerse(parseInt(e.target.value) || 1);
                  // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                  // scheduleAutoGenerate();
                }}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    handleGenerate();
                  }
                }}
              />
            </div>
          </div>
        )}

        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
        {!showClouds && (
          <>
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
            <div className="text-center text-xs sm:text-sm text-muted-foreground py-3 px-4 bg-blue-50 rounded-lg border border-blue-100 mt-4 sm:mt-6">
              üí° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –∏ —Å—Ç–∏—Ö–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏—Ö"
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏—Ö–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
            <div className="flex justify-center pt-1 sm:pt-2">
              <Button
                onClick={handleGenerate}
                disabled={isGenerating}
                size="lg"
                className="bg-gradient-sacred hover:opacity-90 transition-sacred shadow-divine px-6 sm:px-8 py-2 sm:py-3 h-10 sm:h-12 w-full sm:w-auto"
              >
                {isGenerating ? (
                  <>
                    <Loader2 className="w-4 h-4 sm:w-5 sm:h-5 mr-2 sm:mr-3 animate-spin" />
                    <span className="text-sm sm:text-base">–ó–∞–≥—Ä—É–∂–∞—é...</span>
                  </>
                ) : (
                  <>
                    <BookOpen className="w-4 h-4 sm:w-5 sm:h-5 mr-2 sm:mr-3" />
                    <span className="text-sm sm:text-base">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∏—Ö</span>
                  </>
                )}
              </Button>
            </div>
          </>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
        {!showClouds && (
          <div className="flex gap-2 sm:gap-4 justify-center pt-1 sm:pt-2">
            <Button
              variant="outline"
              size="lg"
              onClick={handlePreviousVerse}
              disabled={((generatedVerse?.chapter || chapter) === 1 && (generatedVerse?.verse || verse) === 1) || isGenerating}
              className="h-9 sm:h-11 px-3 sm:px-6 flex-1 sm:flex-none"
            >
              {isGenerating ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <span className="text-xs sm:text-sm">‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π</span>
              )}
            </Button>
            <Button
              variant="outline"
              size="lg"
              onClick={handleNextVerse}
              disabled={((generatedVerse?.chapter || chapter) === selectedTextInfo?.chapters && (generatedVerse?.verse || verse) === 50) || isGenerating}
              className="h-9 sm:h-11 px-3 sm:px-6 flex-1 sm:flex-none"
            >
              {isGenerating ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <span className="text-xs sm:text-sm">–°–ª–µ–¥—É—é—â–∏–π ‚Üí</span>
              )}
            </Button>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - —Å–∫—Ä—ã—Ç–∞ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ */}
        {!compact && (
          <Button
            onClick={handleGenerate}
            disabled={isGenerating}
            className="w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white"
          >
            {isGenerating ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                –ü–æ–∏—Å–∫ —Å—Ç–∏—Ö–∞...
              </>
            ) : (
              <>
                <BookOpen className="w-4 h-4 mr-2" />
                –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏—Ö
              </>
            )}
          </Button>
        )}

        {/* –û—à–∏–±–∫–∞ */}
        {error && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - —Å–∫—Ä—ã—Ç –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ */}
        {generatedVerse && !compact && (
          <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
            <div className="flex items-center gap-2 mb-3">
              <CheckCircle className="w-5 h-5 text-green-500" />
              <h4 className="font-semibold text-green-800">
                {getVerseTitle((generatedVerse.language || 'ru') as LanguageCode, generatedVerse.chapter, generatedVerse.verse, generatedVerse.bookName || generatedVerse.title)}
              </h4>
            </div>

            <div className="space-y-3">
              {/* –°–∞–Ω—Å–∫—Ä–∏—Ç */}
              <div>
                <h5 className="font-medium text-sm text-green-700 mb-1">
                  {getSectionLabel((generatedVerse.language || 'ru') as LanguageCode, 'sanskrit')}
                </h5>
                <p className="text-lg font-semibold text-krishna-blue">
                  {generatedVerse.sanskrit}
                </p>
              </div>

              {/* –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è */}
              {generatedVerse.transliteration && (
                <div>
                  <h5 className="font-medium text-sm text-green-700 mb-1">
                    {getSectionLabel((generatedVerse.language || 'ru') as LanguageCode, 'transliteration')}
                  </h5>
                  <p className="text-sm text-gray-600 italic">
                    {generatedVerse.transliteration}
                  </p>
                </div>
              )}

              {/* –ü–æ—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ */}
              {generatedVerse.wordByWordTranslation && (
                <div>
                  <h5 className="font-medium text-sm text-green-700 mb-1">
                    –ü–æ—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:
                  </h5>
                  <div className="text-sm text-gray-600">
                    {generatedVerse.wordByWordTranslation.split(';').map((item, index) => {
                      const [sanskrit, translation] = item.split('‚Äî').map(s => s.trim());
                      return (
                        <div key={index} className="mb-1">
                          <span className="font-medium" style={{ color: '#b91c1c' }}>
                            {sanskrit}
                          </span>
                          {translation && (
                            <>
                              <span className="mx-1 text-gray-400">‚Äî</span>
                              <span className="text-gray-700">{translation}</span>
                            </>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}

              {/* –ü–µ—Ä–µ–≤–æ–¥ */}
              <div>
                <h5 className="font-medium text-sm text-green-700 mb-1">
                  {getSectionLabel((generatedVerse.language || 'ru') as LanguageCode, 'translation')}
                </h5>
                <p className="text-sm leading-relaxed">
                  {generatedVerse.translation}
                </p>
              </div>

              {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
              {generatedVerse.commentary && (
                <div>
                  <h5 className="font-medium text-sm text-green-700 mb-1">
                    {getSectionLabel((generatedVerse.language || 'ru') as LanguageCode, 'commentary')}
                  </h5>
                  <div className="text-xs leading-relaxed text-gray-600">
                    {processCommentaryText(generatedVerse.commentary)}
                  </div>
                </div>
              )}

              <div className="text-xs text-gray-500 space-y-1">
                <div>
                  {getSectionLabel((generatedVerse.language || 'ru') as LanguageCode, 'source')} {generatedVerse.source}
                </div>
                {generatedVerse.cached && generatedVerse.createdAt && (
                  <div>
                    –î–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É: {new Date(generatedVerse.createdAt).toLocaleDateString('ru-RU')}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
